<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[通过nvm安装Nodejs]]></title>
      <url>%2F2017%2F04%2F17%2F%E9%80%9A%E8%BF%87nvm%E5%AE%89%E8%A3%85Nodejs%2F</url>
      <content type="text"><![CDATA[安装NVM 下载 nvm 包并安装到C:\dev\nvm目录下，下载 地址：https://github.com/coreybutler/nvm-windows/releases 修改C:\dev\nvm\settings.txt为如下内容（我只添加了前两项）root: C:\dev\nvm 配置为nvm.exe的路径，根据你的实际情况修改path: C:\dev\nodejs 配置为 node 快捷方式所在的目录，当我们用哪个版本的node时，就会将nvm文件夹下那个版本的node添加到这个path路径里arch: 64 配置为当前操作系统的位数proxy: none 添加环境变量：NVM_HOME的变量值为：C:\dev\nvm;NVM_SYMLINK的变量值为：C:\dev\nodejs; 在path中添加以上两个变量:;%NVM_HOME%;%NVM_SYMLINK%; 打开一个cmd窗口输入命令：nvm -v那么我们会看到当前nvm的版本信息。然后我们可以安装nodejs了。 安装Node 继续输入命令：nvm install latest如果网络畅通，我们会看到正在下载的提示，下载完成后会让你use那个最新的node版本。 如果你是第一次下载，在use之前，C:\dev目录下是没有nodejs这个文件夹的，在输入比如： nvm use 5.11.0 之后，你会发现，C:\dev目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 C:\dev\nvm 里的 v5.11.0 文件夹。 同样的咱们可以下载其他版本的nodejs，这样通过命令:nvm use 版本号 比如：nvm use 5.11.0就可以轻松实现版本切换了。 备注： 如果你的电脑系统是32 位的，那么在下载nodejs版本的时候，一定要指明 32 如： nvm install 5.11.0 32 这样在32位的电脑系统中，才可以使用，默认是64位的。 安装NPM 通过以上方式，Node其实已经安装得差不多了，我们需要配置NPM的全局路径，以保证以后在不同Node版本下全局安装的包都在同一个路径下面 首先我们进入命令模式，输入 npm config set prefix &quot;C:\dev\nvm\npm&quot; 回车，这是在配置npm的全局安装路径，然后在用户文件夹下会生成一个.npmrc的文件，用记事本打开后可以看到如下内容：prefix=C:\dev\nvm\npm 然后继续在命令中输入： npm install npm -g 回车后会发现正在下载npm包，在C:\dev\nvm\npm目录中可以看到下载中的文件，以后我们只要用npm安装包的时候加上 -g 就可以把包安装在我们刚刚配置的全局路径下了。 我们为这个npm配置环境变量： 变量名为：NPM_HOME，变量值为 ：C:\dev\nvm\npm 在Path的最前面添加;%NPM_HOME%，注意了，这个一定要添加在%NVM_SYMLINK%之前，所以我们直接把它放到Path的最前面 最后我们新打开一个命令窗口，输入npm -v,此时我们使用的就是我们统一下载的npm包了。 安装nrm npm install nrm -g nrm ls nrm use xxx]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[interview]]></title>
      <url>%2F2017%2F04%2F14%2Finterview%2F</url>
      <content type="text"><![CDATA[js自定义log方法123function log() &#123; console.log.apply(console, arguments);&#125; console.log.apply(console, arguments)的意思是:让上面声明的那个log中的this由原来的指向切换到新的指向，让它指向console对象，因为console内部机制，用window调用是不合法的，只能用console自己调用！第二个参数的目的是为了达到可以一次接受一个参数arguments列表。理解误区：console.log.apply(console, arguments)等同console.log(arguments)而不是console(arguments)，且此时的console.log是被apply处理过的，可以一次接受若干参数。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Sublime Text 3搭建Nodejs开发环境]]></title>
      <url>%2F2017%2F04%2F14%2FSublime-Text-3%E6%90%AD%E5%BB%BANodejs%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
      <content type="text"><![CDATA[Nodejs.sublime-build的创建123456789101112131415&#123; "cmd": ["node", "$file"], "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)", "selector": "source.js", "shell":true, "encoding": "utf8", "windows": &#123; "cmd": ["taskkill","/F", "/IM", "node.exe","&amp;","node", "$file"] &#125;, "linux": &#123; "cmd": ["killall node; node", "$file"] &#125;&#125; Nodejs插件的设置123456789101112131415&#123; // save before running commands "save_first": true, // if present, use this command instead of plain "node" // e.g. "/usr/bin/node" or "C:\bin\node.exe" "node_command": "C:\\dev\\nodejs\\node.exe", //node.exe 的位置 // Same for NPM command "npm_command": "C:\\dev\\nvm\\npm\\npm.cmd", //npm.cmd 的位置 // as 'NODE_PATH' environment variable for node runtime "node_path":true, "expert_mode": false, "ouput_to_new_tab": false,&#125; 验证是否配置成功(ctrl+b)12345678910var http = require('http');var os = require('os');http.createServer(function (request, response) &#123; response.writeHead(200, &#123;'Content-Type': 'text/plain'&#125;); response.end('Hello World\n');&#125;).listen(3000);console.log('Server running at http://127.0.0.1:3000/');]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[DOM]]></title>
      <url>%2F2017%2F04%2F13%2FDOM%2F</url>
      <content type="text"><![CDATA[Node Properties: childNodes 空格/注释都会算节点，而children只会找到元素节点 firstChild lastChild nextSibling nodeName nodeType nodeValue parentNode previousSibling Node Methods: appendChild() cloneNode() compareDocumentPosition() contains() hasChildNodes() insertBefore() parentElement.insertBefore(newElement, targetElement) //targetElement是指在newElement之后的元素 isEqualNode() removeChild() replaceChild() Document Methods: document.createElement() document.createTextNode() HTML * Element Properties: innerHTML outerHTML textContent innerText outerText firstElementChild lastElementChild nextElementChild previousElementChild children HTML element Methods: insertAdjacentHTML() Node Properties createElement() tagName children getAttribute() setAttribute() hasAttribute() removeAttribute() classList() dataset attributes 长度 offsetLeft offsetTop offsetParent 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;style&gt; body &#123; margin: 0; &#125; #blue &#123; height: 100px; width: 100px; background-color: blue; border: 10px solid gray; padding: 25px; margin: 25px; &#125; #red &#123; height: 50px; width: 50px; background-color: red; border: 10px solid gray; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="blue"&gt; &lt;div id="red"&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt; var div = document.querySelector('#red'); console.log(div.offsetLeft); //logs 60 console.log(div.offsetTop); //logs 60 console.log(div.offsetParent); //logs &lt;body&gt; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; getBoundingClientRect() 得到的是一个对象，里面保存了top/bottom/left/right/height/width top/bottom都是以元素外边框相对于浏览器viewpoint的上边缘 left/bottom都是以元素外边框相对于浏览器viewpoint的左边缘 width/height = (border + padding + content) 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;style&gt; body &#123; margin: 0; &#125; div &#123; height: 50px; width: 50px; background-color: red; border: 10px solid gray; margin: 100px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;&lt;/div&gt; &lt;script&gt; var divEdges = document.querySelector('div').getBoundingClientRect(); console.log(divEdges.top, divEdges.right, divEdges.bottom, divEdges.left); //logs '100 170 170 100' &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; clientWidth and clientHeight = (padding + content) 不能包括滚动条 scrollHeight and scrollWidth 获取的是被卷曲的元素的宽高，强调的是元素 scrollTop and scrollLeft 获取上边和左边被卷曲的长度]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[python基础教程]]></title>
      <url>%2F2017%2F04%2F12%2Fpython%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[Tips Clear Screen 123imoprt osclear = lambda: os.system('cls')clear() Keywords 12import keywordkeyword.kwlist First Program in Python1print("welcome") Data Types12345type(2)type(2.2)type(2000000)type(True)type('a') Variables12345678910111213141516171819number = 2real = 2.2word = "word"pint(word)type(word)a = b = c = 1.5print(a)print(b)print(c)one, two, three = 1, 'two', 'three'print(one)print(two)print(three)number = 1str = 'string'number = str Comments Single-line 1# 单行注释 Multi-line 123'''多行注释''' Expression in Python1234print(2.0+5)print(10.0-5)print(40*3*0.5)print(2**3) # 乘方 String123456789101112131415161718192021222324252627282930313233343536string = '012345'print(string[2:5])print(string[:5])print(string[3])string2 = ('con' + 'sole') * 2print(string2)i = "I"can = "can"print(i + can);word = "Ford"word = "L" + word[1:]print(word)word([2]) = "f" # 会报错，字符串不允许修改# 这种写法表示内部的字符不转义print(r'c:\number\nan')# 如果这里没有\会多一个空行print('''\ hello: world world ''');print("今天星期&#123;0&#125;,天气&#123;1&#125;".format(3,"晴天"))print('prices:(&#123;x&#125;, &#123;y&#125;, &#123;z&#125;)'.format(x = 2.0, y = 1.5, z = 5))print("the &#123;vehicle&#125; had &#123;0&#125; crashes in &#123;1&#125; months".format(5,6,vehicle = 'car'))print('&#123;:&lt;20&#125;'.format("text"))print('&#123;:&gt;20&#125;'.format("text"))print('&#123;:b&#125;'.format(21)) # 转二进制print('&#123;:x&#125;'.format(21)) # 转八进制print('&#123;:o&#125;'.format(21)) # 转十六进制 (未完待续)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Sublime Text 3下的python配置]]></title>
      <url>%2F2017%2F04%2F12%2FSublime-Text-3%E4%B8%8B%E7%9A%84python%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[Python的安装 下载安装python 配置python到系统环境变量中的path属性中去 Build System Tool—&gt;Build System-&gt;New Build System 添加如下代码并保存为Python.sublime-build 12345&#123; "cmd": ["C:\\Users\\Alan_\\AppData\\Local\\Programs\\Python\\Python36-32\\python.exe","-u","$file"], "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)", "selector": "source.python"&#125; 新建一个python文件，ctrl+b就可以出效果了]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[前端跨域整理]]></title>
      <url>%2F2017%2F04%2F12%2F%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E6%95%B4%E7%90%86%2F</url>
      <content type="text"><![CDATA[浏览器的同源策略限制了一个源(origin)中加载文本或者脚本与来自其他源(origin)中资源的交互方式，所谓的同源就是指协议、域名、端口相同。 JSONPJSONP的原理实际上就是script标签不受同源策略的限制，在页面中动态插入了script，script标签的src属性就是后端api接口的地址，并且以get的方式将前端回调处理函数名称告诉后端，后端在响应请求时会将回调返还，并且将数据以参数的形式传递回去。 前端： 12345678910//http://127.0.0.1:8888/jsonp.htmlvar script = document.createElement('script');script.src = 'http://127.0.0.1:2333/jsonpHandler?callback=_callback'document.body.appendChild(script); //插入script标签//回调处理函数 _callbackvar _callback = function(obj) &#123; for (key in obj) &#123; console.log('key: ' + key + ' value: ' + obj[key]); &#125;&#125; 后端 12345678910//http://127.0.0.1:2333/jsonpHandlerapp.get('/jsonpHandler', (req, res) =&gt; &#123; let callback = req.query.callback; let obj = &#123; type: 'jsonp', name: 'weapon-x' &#125;; res.writeHead(200, &#123; "Content-Type": "text/javascript" &#125;); res.end(callback + '(' + JSON.stringify(obj) + ')');&#125;) 注意：JsonP只对GET方法有效 Cross-Origin Resource Sharing（CORS）跨域资源共享Cross-Origin Resource Sharing(跨域资源共享)是一种允许当前域（origin）的资源（比如html/js/web service）被其他域（origin）的脚本请求访问的机制。当使用XMLHttpRequest发送请求时，浏览器如果发现违反了同源策略就会自动加上一个请求头:origin,后端在接受到请求后确定响应后会在Response Headers中加入一个属性:Access-Control-Allow-Origin,值就是发起请求的源地址(http://127.0.0.1:8888)，浏览器得到响应会进行判断Access-Control-Allow-Origin的值是否和当前的地址相同，只有匹配成功后才进行响应处理。 现代浏览器中和移动端都支持CORS（除了opera mini），IE下需要8+ 前端： 1234567891011//http://127.0.0.1:8888/cors.htmlvar xhr = new XMLHttpRequest();xhr.onload = function(data) &#123; var _data = JSON.parse(data.target.responseText) for (key in _data) &#123; console.log('key: ' + key + ' value: ' + _data[key]); &#125;&#125;;xhr.open('POST', 'http://127.0.0.1:2333/cors', true);xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');xhr.send(); 后端 1234567891011121314//http://127.0.0.1:2333/corsapp.post('/cors', (req, res) =&gt; &#123; if (req.headers.origin) &#123; res.writeHead(200, &#123; "Content-Type": "text/html; charset=UTF-8", "Access-Control-Allow-Origin": 'http://127.0.0.1:8888' &#125;); let people = &#123; type: 'cors', name: 'weapon-x' &#125; res.end(JSON.stringify(people)); &#125;&#125;) 123res.header("Access-Control-Allow-Origin", "*");res.header("Access-Control-Allow-Headers", "X-Requested-With");res.header("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS"); 以上两种方法对比 JSONP只能实现GET请求，而CORS支持所有类型的HTTP请求。 使用CORS，开发者可以使用普通的XMLHttpRequest发起请求和获得数据，比起JSONP有更好的错误处理。 JSONP主要被老的浏览器支持，它们往往不支持CORS，而绝大多数现代浏览器都已经支持了CORS） window.namewindow.postmessage()这个功能主要包括接受信息的”message”事件和发送消息的”postMessage”方法。动态插入iframe标签，再从iframe里面拿回数据，这个叫跨页面通信更合适]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[RegExp]]></title>
      <url>%2F2017%2F04%2F10%2FRegExp%2F</url>
      <content type="text"><![CDATA[RegExp 知识点总结作用： 用来匹配或者替换一些文本 元字符 . 除换行符以外的任何单个字符 [] 定义一个字符集合，匹配能够与该集合中的任意一个成员相匹配的文本 - 表示一个字符区间，如[0-9]。注意[A-z]这其中还包括了一些非字母字符，具体请自行查看ASCII，如果要匹配-不需要进行转移 ^ 如果用字字符集合中，是取非匹配，如[^0-9];如果不是用在字符集合中，则表示匹配输入的开始 空白元字符 [\b] 回退（并删除）一个字符（Backspace键） \f 换页符 \n 换行符 （光标往下一行，不一定到下一行行首） \r 回车符 （光标重新回到本行开头） \t 制表符（Tab键） \v 垂直制表符 类元字符 \d 任何一个数字字符（等价于[0-9]） \D 任何一个非数字字符（等价于[^0-9]） \w 任何一个字母、数字、下划线字符（等价于[a-zA-Z0-9_]） \W 任何一个非字母、数字、下划线字符（等价于[^a-zA-Z0-9_]） \s 任何一个空白字符（等价于[\f\n\f\t\v]） \S 任何一个非空白字符（等价于[^\f\n\f\t\v] 限定匹配字符个数的特殊元字符 + 匹配一个或多个字符，等价于{1,} * 匹配零个或多个字符，等价于{0,} ? 匹配零个或一个字符，等价于{0,1} {n} 匹配出现n次 {n,m} 匹配出现至少n次，最多出现m次 *、+、{n, }是贪婪型元字符，在后面添加?可将其转换为懒惰型元字符，懒惰的含义是匹配尽可能少的字符。例如，对 “123abc” 应用 /\d+/ 将会返回 “123”，如果使用 /\d+?/,那么就只会匹配到 “1” 位置匹配 \b 指定单词边界，用来匹配一个位置，不匹配任何字符，这个位置位于一个能构成单词的字符\w和不能够能单词的字符\W之间。 ^ 字符串的开头 $ 字符串的结尾 子表达式 () 回溯引用 例子：[ ]+(\w+)[ ]+\1 这个地方的\1就是指引用在前半部分中定义的子表达式; ‘1991-1-19’.replace( /(\d+)-(\d+)-(\d+)/, ‘$1年$2月$3日’ ) 使用正则表达式的方法 exec() 返回一个数组，其中包含匹配到的项，index，input test() 返回一个boolean值 match() 返回一个数组 search() 返回匹配到的开始索引 replace() split()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Sublime Text 3个人常用插件及设置]]></title>
      <url>%2F2017%2F04%2F07%2FSublime-Text-3%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%8F%8A%E8%AE%BE%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[Package Control1import urllib.request,os,hashlib; h = &apos;df21e130d211cfc94d9b0905775a7c0f&apos; + &apos;1e3d39e33b79698005270310898eea76&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by) EmmetCan I UseGulpJavaScript CompletionsJava​Script &amp; Node​JS SnippetsBracket Highlighter( Preferences -&gt; package settings -&gt; Bracket Highlighter -&gt; Bracket Settings – User)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; "bracket_styles": &#123; "default": &#123; "icon": "dot", // "color": "entity.name.class", "color": "brackethighlighter.default", "style": "highlight" &#125;, "unmatched": &#123; "icon": "question", "color": "brackethighlighter.unmatched", "style": "highlight" &#125;, "curly": &#123; "icon": "curly_bracket", "color": "brackethighlighter.curly", "style": "highlight" &#125;, "round": &#123; "icon": "round_bracket", "color": "brackethighlighter.round", "style": "highlight" &#125;, "square": &#123; "icon": "square_bracket", "color": "brackethighlighter.square", "style": "highlight" &#125;, "angle": &#123; "icon": "angle_bracket", "color": "brackethighlighter.angle", "style": "highlight" &#125;, "tag": &#123; "icon": "tag", "color": "brackethighlighter.tag", "style": "highlight" &#125;, "single_quote": &#123; "icon": "single_quote", "color": "brackethighlighter.quote", "style": "highlight" &#125;, "double_quote": &#123; "icon": "double_quote", "color": "brackethighlighter.quote", "style": "highlight" &#125;, "regex": &#123; "icon": "regex", "color": "brackethighlighter.quote", "style": "outline" &#125; &#125;&#125; ConvertToUTF8AutoFileNameAllAutocompleteDocBlockrAdvancedNewFileTrailing spacesSideBarEnhancements1234567891011&#123; "keys": ["ctrl+shift+c"], "command": "copy_path" &#125;, //chrome&#123; "keys": ["f2"], "command": "side_bar_files_open_with", "args": &#123; "paths": [], "application": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe", "extensions":".*" &#125;&#125; Terminal123456&#123; // window下终端路径 "terminal": "C:/#Alan/software/cmder/Cmder.exe", // window下终端参数 "parameters": ["/START", "%CWD%"]&#125; ThemrSeti_UIMaterial Theme-AppbarMaterial ThemeColorsublime：Candy CrushMarkDownPreview12345&#123; "keys": ["alt+m"], "command": "markdown_preview", "args": &#123; "target": "browser"&#125;&#125; MarkDownEditingMarkDown ExtendedSublimeserverColorHighlighter1234&#123; "ha_style": "filled", "icons": false&#125; HTML-CSS-JS PrettifyjsfmtBabelJsformat1234567&#123; // 在包中设置 // 为了支持jsx "e4x": true, // jsformat options "format_on_save": true,&#125; React Es6 Snippets123456789101112131415161718192021&#123; "keys": ["tab"], "command": "expand_abbreviation_by_tab", "context": [ &#123; "operand": "source.js", "operator": "equal", "match_all": true, "key": "selector" &#125;, &#123; "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true &#125; ]&#125;,&#123; "keys": ["tab"], "command": "next_field", "context": [ &#123; "key": "has_next_field", "operator": "equal", "operand": true &#125; ]&#125; 常用快捷键1234567891011121314151617181920212223242526"Alt + F3" // 快速全选"Ctrl + R" // 快速选择函数和css中的选择器"Ctrl + G" // 选择行号"Ctrl + :" // 查找变量名、属性名"Shift + 鼠标右键拖动" // 快速添加游标"Shift + 上下左右" // 选择文字"Ctrl + L" // 选择一整行"Ctrl + KK" // 从光标处开始删除代码至结尾"Ctrl + Shift + " " // 只选择标签，但是属性不变"Ctrl + Shift + ;" // 移除标签"Ctrl + j" // 合并为一行"Ctrl + Shift + j" // 选择父容器中的内容"Ctrl + k" // 跳过同名单词"Ctrl + M" // 在起始括号和结尾括号之间跳转"Ctrl + Shift + M" // 选择&#123;&#125;中所有的内容，使用于css与js"Alt + Shift + W" // 标签包裹"Ctrl+Tab" // 当前窗口中的标签页切换"Alt+Shift+2" // 左右分屏-2列"Ctrl+Shift+分屏序号" // 将当前焦点页分配到分屏序号页"Ctrl+K+T" // 折叠属性"Ctrl+K+0" // 展开所有"F6" // 单词拼写检查 设置1234567891011121314151617181920212223&#123; "bold_folder_labels": true, "caret_style": "phase", "color_scheme": "Packages/Babel/Monokai Phoenix.tmTheme", "font_size": 12, "highlight_line": true, "ignored_packages": [ "Vintage" ], "line_padding_bottom": 1, "line_padding_top": 1, "rulers": [ 80, 100 ], "tab_size": 2, "theme": "Seti.sublime-theme", "translate_tabs_to_spaces": true, "trim_trailing_white_space_on_save": true, "word_wrap": true&#125; 快捷键设置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061[ &#123; "keys": [ "ctrl+shift+c" ], "command": "copy_path" &#125;, &#123; "keys": [ "f2" ], "command": "side_bar_files_open_with", "args": &#123; "paths": [], "application": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe", "extensions": ".*" &#125; &#125;, &#123; "keys": [ "alt+m" ], "command": "markdown_preview", "args": &#123; "target": "browser" &#125; &#125;, &#123; "keys": [ "tab" ], "command": "expand_abbreviation_by_tab", "context": [ &#123; "operand": "source.js", "operator": "equal", "match_all": true, "key": "selector" &#125;, &#123; "key": "selection_empty", "operator": "equal", "operand": true, "match_all": true &#125; ] &#125;, &#123; "keys": [ "tab" ], "command": "next_field", "context": [ &#123; "key": "has_next_field", "operator": "equal", "operand": true &#125; ] &#125;]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用hexo和github搭建个人博客]]></title>
      <url>%2F2017%2F04%2F07%2F%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[环境搭建 Node.js git github账号 hexo 安装 npm install hexo -g 初始化 hexo init 生成静态页 hexo generate | hexo g 本地启动 hexo server 新建博客文章 hexo new [layout] &quot;postName&quot; 博文会自动生成在博客目录下source/_posts/postName.md 如果layout没有传入, 会使用_config.yml文件中的default_layout字段,默认是post 生成静态页 hexo g 部署到github github上建一个仓库，名字必须是your_user_name.github.io sh-keygen -t rsa -C &quot;your_email@example.com生成公钥密钥 将公钥放到github 验证是否通过 ssh -T git@github.com 配置hexo关联到github（repo属性的值是你自己的仓库地址） 1234deploy:type: gitrepo: git@github.com:coolNeil/coolNeil.github.io.gitbranch: master npm install hexo-deployer-git --save 发布到github hexo deploy | hexo d 然后在浏览器输入coolNeil.github.io就能够查看了 删除文章 hexo clean 接着删除source/_posts/文件夹下面的文章 hexo g hexo d 关联域名hexo主题（next） 下载 git clone https://github.com/iissnan/hexo-theme-next themes/next 启用 在主配置文件中设置theme: next 测试是否成功：hexo s --debug next主题选择 在主题配置文件中打开注释scheme: Pisces(此乃个人偏好) 设置语言 在主配置文件中：language: zh-Hans 设置头像 在主题配置文件中修改avatar属性 设置作者昵称 在主配置文件中修改author属性 设置站点描述 在主配置文件中修改description属性 部分问题 分类页404解决(标签页类似) hexo new page &quot;categories&quot; 编辑新建的页面 添加type: &quot;categories&quot; 添加comments: false]]></content>
    </entry>

    
  
  
</search>
